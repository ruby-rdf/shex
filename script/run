#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'shex'
begin
  require 'linkeddata'
rescue LoadError
  require 'rdf/ntriples'
  require 'rdf/turtle'
end
require 'getoptlong'

def run(graph, options = {})
  if options[:verbose]
    STDERR.puts "target graph:\n#{graph.dump(:ttl, standard_prefixes: true)}\n"
    STDERR.puts "shex:\n#{options[:shex]}\n"
  end

  if options[:verbose]
    STDERR.puts ("\nshex:\n" + options[:shex]) 
  end

  shex =  ShEx.parse(options[:shex], options)

  STDERR.puts ("\nSXP:\n" + SXP::Generator.string(shex.to_sxp_bin)) if options[:verbose]

  if options[:to_sxp]
    SXP::Generator.print(shex.to_sxp_bin)
  elsif options[:to_json]
    puts shex.to_json(JSON::LD::JSON_STATE)
  else
    focus = options.delete(:focus)
    shape = options.delete(:shape)
    map = {focus => shape} if shape
    res = shex.execute(focus, graph, map, options)
    puts SXP::Generator.string(res.to_sxp_bin)
  end
rescue ShEx::NotSatisfied => e
  STDERR.puts e
  STDERR.puts SXP::Generator.string(e.expression.to_sxp_bin)
rescue 
  STDERR.puts $!
  STDERR.puts $!.backtrace
end

OPT_ARGS = [
  ["--base", GetoptLong::REQUIRED_ARGUMENT,           "Base URI of target graph, if different from graph location"],
  ["--debug", GetoptLong::NO_ARGUMENT,                "Debug shape matching"],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT,  "Use option argument as the patch input"],
  ["--focus", GetoptLong::REQUIRED_ARGUMENT,          "Starting point"],
  ["--shape", GetoptLong::REQUIRED_ARGUMENT,          "Shape to start with"],
  ["--shex", GetoptLong::REQUIRED_ARGUMENT,           "Location of ShEx document"],
  ["--progress", GetoptLong::NO_ARGUMENT,             "Display parse tree"],
  ["--to-json", GetoptLong::NO_ARGUMENT,              "Generate JSON for schema instead of validating graph"],
  ["--to-sxp", GetoptLong::NO_ARGUMENT,               "Generate SXP for schema instead of validating graph"],
  ["--validate", GetoptLong::NO_ARGUMENT,             "Validate schema document"],
  ["--verbose", GetoptLong::NO_ARGUMENT,              "Display details of processing"],
  ["--help", "-?", GetoptLong::NO_ARGUMENT,           "This message"]
]
def usage
  STDERR.puts %{Usage: #{$0} [options] file ...}
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    STDERR.puts s
  end
  exit(1)
end

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

options = {}

opts.each do |opt, arg|
  case opt
  when '--base'         then options[:base_uri] = arg
  when '--debug'
    logger = Logger.new(STDERR)
    logger.level = Logger::DEBUG
    logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity} #{msg}\n"}
    options[:logger] = logger
    options[:debug] = true
  when '--execute'      then options[:shex] = arg
  when '--focus'        then options[:focus] = arg
  when '--shape'        then options[:shape] = arg
  when '--shex'
    options[:shex] = RDF::Util::File.open_file(arg).read
    options[:format] = :shexj if arg.end_with?(".json")
  when '--progress'
    logger = Logger.new(STDERR)
    logger.level = Logger::INFO
    logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity} #{msg}\n"}
    options[:logger] = logger
    options[:progress] = true
  when '--to-json'      then options[:to_json] = true
  when '--to-sxp'       then options[:to_sxp] = true
  when '--validate'     then options[:validate] = true
  when '--verbose'      then options[:verbose] = true
  when "--help"         then usage
  end
end

raise "No expression defined" unless options[:shex]
if ARGV.empty?
  run(RDF::Graph.new, options)
else
  ARGV.each do |test_file|
    puts "shex #{test_file}"
    run(RDF::Graph.load(test_file), options.merge(base_uri: RDF::URI(test_file)))
  end
end
puts