#!/usr/bin/env ruby
require 'rubygems'
require "bundler/setup"
$:.unshift(File.expand_path("../../lib", __FILE__))
$:.unshift(File.expand_path("../../spec", __FILE__))
require 'logger'
require 'rdf'
require 'rdf/isomorphic'
require 'rspec'
require 'shex'
require 'suite_helper'
require 'getoptlong'

ASSERTOR = "https://greggkellogg.net/foaf#me"
RUN_TIME = Time.now
TEST_BASE = 'https://raw.githubusercontent.com/shexSpec/shexTest/master/'

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap.ttl", __FILE__))
  options[:output].puts %(
<> foaf:primaryTopic <https://rubygems.org/gems/shex> ;
  dc:issued "#{RUN_TIME.xmlschema}"^^xsd:dateTime ;
  foaf:maker <#{ASSERTOR}> .

<#{ASSERTOR}> a foaf:Person, earl:Assertor;
  foaf:name "Gregg Kellogg";
  foaf:title "Implementor";
  foaf:homepage <https://greggkellogg.net/> .
)
end

def run_tc(tc, **options)
  STDERR.write "run #{tc.name}" unless options[:quiet]
  result = "untested"

  begin
    if options[:verbose]
      puts "\nTestCase: #{tc.inspect}"
      puts "\nSchema:\n" + tc.schema_source 
      #puts "\nExpected:\n" + tc.expected
    end

    tc.logger.level = options[:level]
    tc.logger.formatter = lambda {|severity, datetime, progname, msg| "%5s %s\n" % [severity, msg]}

    validate = case tc.name
    when '_all', 'kitchenSink' then false
    else true
    end
    schema = ShEx.parse(tc.schema_source,
      base_uri: tc.base,
      validate: validate,
      logger: tc.logger)

    puts "\nsxp: " + SXP::Generator.string(schema.to_sxp_bin) if options[:verbose]

    focus = ShEx::Algebra::Operator.value(tc.focus, base_uri: tc.base)
    map = if tc.map
      tc.shape_map.inject({}) do |memo, (k,v)|
        memo.merge(ShEx::Algebra::Operator.value(k, base_uri: tc.base) => ShEx::Algebra::Operator.iri(v, base_uri: tc.base))
      end
    elsif tc.shape
      {focus => ShEx::Algebra::Operator.iri(tc.shape, base_uri: tc.base)}
    else
      {}
    end
    focus = nil unless map.empty?

    if tc.positive_test?
      if tc.validation_test?
        r = schema.execute(tc.graph, map, focus: focus, logger: tc.logger, shapeExterns: tc.shapeExterns)
        puts "\nresult: " + SXP::Generator.string(r.to_sxp_bin) if options[:verbose]
        result = "passed"
      else
        result = schema.is_a?(ShEx::Algebra::Schema) ? "passed" : "failed"
      end
    else
      if tc.validation_test?
        r = schema.execute(tc.graph, map, focus: focus, logger: tc.logger, shapeExterns: tc.shapeExterns)
        puts "\nresult: " + SXP::Generator.string(r.to_sxp_bin) if options[:verbose]
        result = "failed"
      else
        result = "failed"
      end
    end
  rescue ShEx::ParseError, ShEx::StructureError, ArgumentError => e
    puts "\nexception: " + e.inspect if options[:verbose]
    result = if tc.negative_test? && (tc.syntax_test? || tc.structure_test?)
      "passed"
    else
      "failed"
    end
  rescue ShEx::NotSatisfied => e
    puts "\nexception: " + e.inspect if options[:verbose]
    result = if tc.negative_test? && tc.validation_test?
      "passed"
    else
      "failed"
    end
  rescue Interrupt
    exit(1)
  rescue Exception => e
    result = "failed"
  end

  if !tc.logger.to_s.empty? && options[:verbose]
    puts "\nlog: " + tc.logger.to_s
  end

  if options[:earl]
    test = TEST_BASE + tc.base.join(tc.id).to_s.sub('.jsonld', '').split('/')[-2..-1].join("/")
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <https://rubygems.org/gems/shex>;
  earl:test <#{test}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  options[:result_count][result] ||= 0
  options[:result_count][result] += 1

  if options[:quiet]
    STDERR.write(result == "passed" ? '.' : 'F')
  else
    STDERR.puts " #{result}"
  end
end

options = {
  output:       STDOUT,
  level:        Logger::WARN,
  validate:     true,
  verbose:      false,
}

OPT_ARGS = [
  ["--debug",         GetoptLong::NO_ARGUMENT,       "Debug shape matching"],
  ["--earl",          GetoptLong::NO_ARGUMENT,       "Generate EARL report"],
  ["--help", "-?",    GetoptLong::NO_ARGUMENT,       "This message"],
  ["--mancache",      GetoptLong::NO_ARGUMENT,       "Creates an N-Triples representation of the combined manifests"],
  ["--output", "-o",  GetoptLong::REQUIRED_ARGUMENT, "Output to specified file"],
  ["--progress",      GetoptLong::NO_ARGUMENT,       "Display parse tree"],
  ["--quiet", "-q",   GetoptLong::NO_ARGUMENT,       "Minimal output"],
  ["--validate",      GetoptLong::NO_ARGUMENT,       "Validate schema document"],
  ["--verbose",       GetoptLong::NO_ARGUMENT,       "Display details of processing"],
]
def usage
  STDERR.puts %{Usage: #{$0} [options] file ...}
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    STDERR.puts s
  end
  exit(1)
end

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

opts.each do |opt, arg|
  case opt
  when '--earl'     then options[:quiet] = options[:earl] = true
  when '--debug'    then options[:level] = Logger::DEBUG
  when '--mancache' then options[:mancache] = true
  when '--output'   then options[:output] = File.open(arg, "w")
  when '--progress' then options[:level] = Logger::INFO
  when '--quiet'
    options[:quiet] = true
    options[:level] = Logger::FATAL
  when '--verbose'  then options[:verbose] = true
  end
end

earl_preamble(options) if options[:earl]
result_count = {}
man_graph = RDF::Graph.new

%w(schemas/manifest.jsonld negativeSyntax/manifest.jsonld negativeStructure/manifest.jsonld validation/manifest.jsonld).each do |variant|
  manifest = Fixtures::SuiteTest::BASE + variant

  Fixtures::SuiteTest::Manifest.open(manifest) do |m|
    if options[:mancache]
      # Output N-Triples for this manifest
      puts m.id
      JSON::LD::API.toRdf(m.instance_variable_get(:@json), base: "#{TEST_BASE}#{variant.sub('.jsonld', '')}") {|s|
        man_graph << s
      }
      next
    end

    m.entries.each do |tc|
      next unless ARGV.empty? || ARGV.any? do |n|
        tc.id.include?(n) ||
        tc.schema.to_s.include?(n) ||
        tc.name.match?(/#{n}/)
      end
      run_tc(tc, result_count: result_count, **options)
    end
  end
end

if options[:mancache]
  require 'rdf/turtle'
  options[:output].write(man_graph.dump(:ttl, standard_prefixes: true,
    base_uri: TEST_BASE,
    prefixes: {
      mf:    "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
      sht:   "http://www.w3.org/ns/shacl/test-suite#",
      sx:    "https://shexspec.github.io/shexTest/ns#"
  }))
else
  STDERR.puts "" if options[:quiet]

  result_count.each do |result, count|
    puts "#{result}: #{count}"
  end
end