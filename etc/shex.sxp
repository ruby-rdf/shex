(
 (rule shexDoc "1"
  (seq (star directive) (opt (seq (alt notStartAction startActions) (star statement)))))
 (rule directive "2" (alt baseDecl prefixDecl importDecl))
 (rule baseDecl "3" (seq "BASE" IRIREF))
 (rule prefixDecl "4" (seq "PREFIX" PNAME_NS IRIREF))
 (rule importDecl "4.5" (seq "IMPORT" IRIREF))
 (rule notStartAction "5" (alt start shapeExprDecl))
 (rule start "6" (seq "START" "=" inlineShapeExpression))
 (rule startActions "7" (plus codeDecl))
 (rule statement "8" (alt directive notStartAction))
 (rule shapeExprDecl "9" (seq shapeExprLabel (alt shapeExpression "EXTERNAL")))
 (rule shapeExpression "10" (seq shapeOr))
 (rule inlineShapeExpression "11" (seq inlineShapeOr))
 (rule shapeOr "12" (seq shapeAnd (star (seq "OR" shapeAnd))))
 (rule inlineShapeOr "13" (seq inlineShapeAnd (star (seq "OR" inlineShapeAnd))))
 (rule shapeAnd "14" (seq shapeNot (star (seq "AND" shapeNot))))
 (rule inlineShapeAnd "15" (seq inlineShapeNot (star (seq "AND" inlineShapeNot))))
 (rule shapeNot "16" (seq (opt "NOT") shapeAtom))
 (rule inlineShapeNot "17" (seq (opt "NOT") inlineShapeAtom))
 (rule shapeAtom "18"
  (alt
   (seq nonLitNodeConstraint (opt shapeOrRef)) litNodeConstraint
   (seq shapeOrRef (opt nonLitNodeConstraint))
   (seq "(" shapeExpression ")") "." ))
 (rule shapeAtomNoRef "19"
  (alt
   (seq nonLitNodeConstraint (opt shapeOrRef)) litNodeConstraint
   (seq shapeDefinition (opt nonLitNodeConstraint))
   (seq "(" shapeExpression ")") "." ))
 (rule inlineShapeAtom "20"
  (alt
   (seq nonLitNodeConstraint (opt inlineShapeOrRef)) litNodeConstraint
   (seq inlineShapeOrRef (opt nonLitNodeConstraint))
   (seq "(" shapeExpression ")") "." ))
 (rule shapeOrRef "21" (alt shapeDefinition shapeRef))
 (rule inlineShapeOrRef "22" (alt inlineShapeDefinition shapeRef))
 (rule shapeRef "23" (alt ATPNAME_LN ATPNAME_NS (seq "@" shapeExprLabel)))
 (rule litNodeConstraint "24"
  (alt
   (seq "LITERAL" (star xsFacet))
   (seq datatype (star xsFacet))
   (seq valueSet (star xsFacet))
   (plus numericFacet)) )
 (rule nonLitNodeConstraint "25"
  (alt (seq nonLiteralKind (star stringFacet)) (plus stringFacet)))
 (rule nonLiteralKind "26" (alt "IRI" "BNODE" "NONLITERAL"))
 (rule xsFacet "27" (alt stringFacet numericFacet))
 (rule stringFacet "28" (alt (seq stringLength INTEGER) REGEXP))
 (rule stringLength "29" (alt "LENGTH" "MINLENGTH" "MAXLENGTH"))
 (rule numericFacet "30"
  (alt (seq numericRange numericLiteral) (seq numericLength INTEGER)))
 (rule numericRange "31"
  (alt "MININCLUSIVE" "MINEXCLUSIVE" "MAXINCLUSIVE" "MAXEXCLUSIVE"))
 (rule numericLength "32" (alt "TOTALDIGITS" "FRACTIONDIGITS"))
 (rule shapeDefinition "33"
  (seq
   (star (alt extraPropertySet "CLOSED")) "{"
   (opt tripleExpression) "}"
   (star annotation) semanticActions ))
 (rule inlineShapeDefinition "34"
  (seq (star (alt extraPropertySet "CLOSED")) "{" (opt tripleExpression) "}"))
 (rule extraPropertySet "35" (seq "EXTRA" (plus predicate)))
 (rule tripleExpression "36" (seq oneOfTripleExpr))
 (rule oneOfTripleExpr "37" (seq groupTripleExpr (star (seq "|" groupTripleExpr))))
 (rule groupTripleExpr "40" (seq unaryTripleExpr (star (seq ";" (opt unaryTripleExpr)))))
 (rule unaryTripleExpr "43"
  (alt
   (seq (opt (seq "$" tripleExprLabel)) (alt tripleConstraint bracketedTripleExpr))
   include ))
 (rule bracketedTripleExpr "44"
  (seq "(" tripleExpression ")" (opt cardinality) (star annotation) semanticActions))
 (rule tripleConstraint "45"
  (seq
   (opt senseFlags) predicate inlineShapeExpression
   (opt cardinality)
   (star annotation) semanticActions ))
 (rule cardinality "46" (alt "*" "+" "?" REPEAT_RANGE))
 (rule senseFlags "47" (seq "^"))
 (rule valueSet "48" (seq "[" (star valueSetValue) "]"))
 (rule valueSetValue "49"
  (alt iriRange literalRange languageRange (seq "." (plus exclusion))))
 (rule exclusion "50" (seq "-" (alt iri literal LANGTAG) (opt "~")))
 (rule iriRange "51" (seq iri (opt (seq "~" (star iriExclusion)))))
 (rule iriExclusion "52" (seq "-" iri (opt "~")))
 (rule literalRange "53" (seq literal (opt (seq "~" (star literalExclusion)))))
 (rule literalExclusion "54" (seq "-" literal (opt "~")))
 (rule languageRange "55"
  (alt
   (seq LANGTAG (opt (seq "~" (star languageExclusion))))
   (seq "@" "~" (star languageExclusion))) )
 (rule languageExclusion "56" (seq "-" LANGTAG (opt "~")))
 (rule include "57" (seq "&" tripleExprLabel))
 (rule annotation "58" (seq "//" predicate (alt iri literal)))
 (rule semanticActions "59" (star codeDecl))
 (rule codeDecl "60" (seq "%" iri (alt CODE "%")))
 (rule literal "13t" (alt rdfLiteral numericLiteral booleanLiteral))
 (rule predicate "61" (alt iri RDF_TYPE))
 (rule datatype "62" (seq iri))
 (rule shapeExprLabel "63" (alt iri blankNode))
 (rule tripleExprLabel "64" (alt iri blankNode))
 (rule numericLiteral "16t" (alt DOUBLE DECIMAL INTEGER))
 (rule rdfLiteral "65" (alt langString (seq string (opt (seq "^^" datatype)))))
 (rule booleanLiteral "134s" (alt "true" "false"))
 (rule string "135s"
  (alt STRING_LITERAL_LONG1 STRING_LITERAL_LONG2 STRING_LITERAL1 STRING_LITERAL2))
 (rule langString "66"
  (alt LANG_STRING_LITERAL1 LANG_STRING_LITERAL_LONG1 LANG_STRING_LITERAL2
   LANG_STRING_LITERAL_LONG2 ))
 (rule iri "136s" (alt IRIREF prefixedName))
 (rule prefixedName "137s" (alt PNAME_LN PNAME_NS))
 (rule blankNode "138s" (seq BLANK_NODE_LABEL))
 (terminals _terminals (seq))
 (terminal CODE "67" (seq "{" (range "^%\\] | '\\'[%\\] | UCHAR)* '%''}'")))
 (terminal REPEAT_RANGE "68" (seq "{" INTEGER (opt (seq "," (opt (alt INTEGER "*")))) "}"))
 (terminal RDF_TYPE "69" (seq "a"))
 (terminal IRIREF "18t"
  (seq "<"
   (range
    "^#x00-#x20<>\"{}|^`\\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */"
   )) )
 (terminal PNAME_NS "140s" (seq (opt PN_PREFIX) ":"))
 (terminal PNAME_LN "141s" (seq PNAME_NS PN_LOCAL))
 (terminal ATPNAME_NS "70" (seq "@" (opt PN_PREFIX) ":"))
 (terminal ATPNAME_LN "71" (seq "@" PNAME_NS PN_LOCAL))
 (terminal REGEXP "72"
  (seq "/"
   (plus (alt (range "^/\\\n\r") (seq "\\" (range "nrt\\|.?*+(){}$-[]^/")) UCHAR))
   "/"
   (star (range "smix"))) )
 (terminal BLANK_NODE_LABEL "142s"
  (seq "_:" (alt PN_CHARS_U (range "0-9")) (opt (seq (star (alt PN_CHARS ".")) PN_CHARS))))
 (terminal LANGTAG "145s"
  (seq "@" (plus (range "a-zA-Z")) (star (seq "-" (plus (range "a-zA-Z0-9"))))))
 (terminal INTEGER "19t" (seq (opt (range "+-")) (plus (range "0-9"))))
 (terminal DECIMAL "20t" (seq (opt (range "+-")) (star (range "0-9")) "." (plus (range "0-9"))))
 (terminal DOUBLE "21t"
  (seq
   (opt (range "+-"))
   (alt
    (seq (plus (range "0-9")) "." (star (range "0-9")) EXPONENT)
    (seq (opt ".") (plus (range "0-9")) EXPONENT)) ))
 (terminal EXPONENT "155s" (seq (range "eE") (opt (range "+-")) (plus (range "0-9"))))
 (terminal STRING_LITERAL1 "156s"
  (seq "'" (star (alt (range "^#x27#x5C#xA#xD") ECHAR UCHAR)) "'"))
 (terminal STRING_LITERAL2 "157s"
  (seq "\"" (star (alt (range "^#x22#x5C#xA#xD") ECHAR UCHAR)) "\""))
 (terminal STRING_LITERAL_LONG1 "158s"
  (seq "'''" (seq (opt (alt "'" "''")) (range "^'\\] | ECHAR | UCHAR))* \"'''\""))))
 (terminal STRING_LITERAL_LONG2 "159s"
  (seq "\"\"\"" (seq (opt (alt "\"" "\"\"")) (range "^\"\\] | ECHAR | UCHAR))* '\"\"\"'"))))
 (terminal LANG_STRING_LITERAL1 "73"
  (seq "'" (star (alt (range "^#x27#x5C#xA#xD") ECHAR UCHAR)) "'" LANGTAG))
 (terminal LANG_STRING_LITERAL2 "74"
  (seq "\"" (star (alt (range "^#x22#x5C#xA#xD") ECHAR UCHAR)) "\"" LANGTAG))
 (terminal LANG_STRING_LITERAL_LONG1 "75"
  (seq "'''" (seq (opt (alt "'" "''")) (range "^'\\] | ECHAR | UCHAR))* \"'''\" LANGTAG"))))
 (terminal LANG_STRING_LITERAL_LONG2 "76"
  (seq "\"\"\""
   (seq (opt (alt "\"" "\"\"")) (range "^\"\\] | ECHAR | UCHAR))* '\"\"\"' LANGTAG"))) )
 (terminal UCHAR "26t"
  (alt (seq "\\u" HEX HEX HEX HEX) (seq "\\U" HEX HEX HEX HEX HEX HEX HEX HEX)))
 (terminal ECHAR "160s" (seq "\\" (range "tbnrf\\\"'")))
 (terminal PN_CHARS_BASE "164s"
  (alt
   (range "A-Z")
   (range "a-z")
   (range "#x00C0-#x00D6")
   (range "#x00D8-#x00F6")
   (range "#x00F8-#x02FF")
   (range "#x0370-#x037D")
   (range "#x037F-#x1FFF")
   (range "#x200C-#x200D")
   (range "#x2070-#x218F")
   (range "#x2C00-#x2FEF")
   (range "#x3001-#xD7FF")
   (range "#xF900-#xFDCF")
   (range "#xFDF0-#xFFFD")
   (range "#x10000-#xEFFFF")) )
 (terminal PN_CHARS_U "165s" (alt PN_CHARS_BASE "_"))
 (terminal PN_CHARS "167s"
  (alt PN_CHARS_U "-"
   (range "0-9")
   (range "#x00B7")
   (range "#x0300-#x036F")
   (range "#x203F-#x2040")) )
 (terminal PN_PREFIX "168s"
  (seq PN_CHARS_BASE (opt (seq (star (alt PN_CHARS ".")) PN_CHARS))))
 (terminal PN_LOCAL "169s"
  (seq
   (alt PN_CHARS_U ":" (range "0-9") PLX)
   (opt (seq (star (alt PN_CHARS "." ":" PLX)) (alt PN_CHARS ":" PLX)))) )
 (terminal PLX "170s" (alt PERCENT PN_LOCAL_ESC))
 (terminal PERCENT "171s" (seq "%" HEX HEX))
 (terminal HEX "172s" (alt (range "0-9") (range "A-F") (range "a-f")))
 (terminal PN_LOCAL_ESC "173s"
  (seq "\\"
   (alt "_" "~" "." "-" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" "/" "?" "#"
    "@" "%" )) )
 (pass _pass
  (alt
   (plus (range " \t\r\n"))
   (seq "#" (star (range "^\r\n")))
   (seq "/*" (star (alt (range "^*") (seq "*" (alt (range "^/") "\\/")))) "*/")) ))
